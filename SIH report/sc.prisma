generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id               Int               @id @default(autoincrement())
  name             String            @unique
  description      String?
  location         String?
  headId           Int?              @unique // Optional reference to an Officer
  head             Officer?          @relation("DepartmentHead", fields: [headId], references: [id])
  employees        Employee[]
  officers         Officer[]
  technicalExperts TechnicalExpert[]
  projects         Project[]
  resources        Resource[]
  tasks            Task[]            @relation("DepartmentTasks")
  reports          Report[]          @relation("DepartmentReports")
  forums           Forum[]           @relation("DepartmentForums")
  status           DepartmentStatus  @default(ACTIVE)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Employee {
  id           Int        @id @default(autoincrement())
  name         String
  email        String     @unique
  password     String
  phone        String
  address      String?
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  projectId    Int?
  projects     Project[]  @relation("ProjectEmployees")
}

model Officer {
  id             Int         @id @default(autoincrement())
  name           String
  email          String      @unique
  password       String
  phone          String
  address        String?
  departmentId   Int
  department     Department  @relation(fields: [departmentId], references: [id])
  forumPosts     ForumPost[]
  status         UserStatus  @default(ACTIVE)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  // Relation to head the department
  headDepartment Department? @relation("DepartmentHead")
  projectId      Int?
  projects       Project[]   @relation("ProjectOfficers")
}

model TechnicalExpert {
  id           Int        @id @default(autoincrement())
  name         String
  email        String     @unique
  password     String
  expertise    String[]
  phone        String
  address      String?
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  projectId    Int?
  projects     Project[]  @relation("ProjectTechnicalExperts")
}

model Project {
  id               Int               @id @default(autoincrement())
  name             String
  description      String?
  location         String?
  startDate        DateTime
  endDate          DateTime?
  status           ProjectStatus     @default(PLANNING)
  budget           Float
  departmentId     Int
  department       Department        @relation(fields: [departmentId], references: [id])
  officers         Officer[]         @relation("ProjectOfficers")
  technicalExperts TechnicalExpert[] @relation("ProjectTechnicalExperts")
  siteId           Int
  site             Site              @relation("SiteProjects", fields: [siteId], references: [id])
  phases           ProjectPhase[]
  employees        Employee[]        @relation("ProjectEmployees")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model ProjectPhase {
  id        Int         @id @default(autoincrement())
  name      String
  startDate DateTime
  endDate   DateTime?
  status    PhaseStatus @default(PENDING)
  projectId Int
  project   Project     @relation(fields: [projectId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Site {
  id          Int       @id @default(autoincrement())
  name        String
  location    String
  description String?
  projects    Project[] @relation("SiteProjects")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Resource {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  quantity     Int
  type         ResourceType
  departmentId Int
  department   Department     @relation(fields: [departmentId], references: [id])
  status       ResourceStatus @default(AVAILABLE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Task {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  status      TaskStatus   @default(PENDING)
  departments Department[] @relation("DepartmentTasks")
  reports     Report[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Report {
  id           Int        @id @default(autoincrement())
  name         String
  title        String
  description  String?
  date         DateTime
  departmentId Int
  department   Department @relation("DepartmentReports", fields: [departmentId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  taskId       Int?
  Task         Task?      @relation(fields: [taskId], references: [id])
}

model Forum {
  id             Int               @id @default(autoincrement())
  name           String
  description    String?
  sections       ForumSection[]
  departmentId   Int
  department     Department        @relation("DepartmentForums", fields: [departmentId], references: [id])
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model ForumSection {
  id             Int               @id @default(autoincrement())
  name           String
  description    String?
  forumId        Int
  forum          Forum             @relation(fields: [forumId], references: [id])
  posts          ForumPost[]
  accessLevel    AccessLevel       @default(PUBLIC)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model ForumPost {
  id             Int               @id @default(autoincrement())
  title          String
  content        String
  sectionId      Int
  section        ForumSection      @relation(fields: [sectionId], references: [id])
  authorId       Int
  author         Officer?         @relation(fields: [authorId], references: [id])
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

enum DepartmentStatus {
  ACTIVE
  INACTIVE
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum ProjectStatus {
  ON_GOING
  COMPLETED
  REJECTED
  PLANNING
  ON_HOLD
}

enum PhaseStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum ResourceType {
  HUMAN
  TECHNICAL
  DATA
  OTHER
}

enum ResourceStatus {
  AVAILABLE
  IN_USE
  REPAIRING
  DISPOSED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

enum AccessLevel {
  PUBLIC
  PRIVATE
  DEPARTMENT_ONLY
}